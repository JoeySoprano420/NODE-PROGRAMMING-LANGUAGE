üúÇ NODE ‚Äì Naturally Optimized Diamond Engineered
A Language of Tactical Precision, Symbolic Truth, and Executable Intuition.
‚ÄúWritten with intent. Executed with certainty. Proven by design.‚Äù

NODE LANGUAGE GRAMMAR v1.0 (EBNF-Style)

program        = "Start", identifier?, block, "Return", ";" ;
block          = { statement } ;

statement      = assignment, ";" |
                 declaration, ";" |
                 conditional |
                 loop |
                 function_call, ";" |
                 control, ";" |
                 comment ;

declaration    = "Init", identifier, "=", expression |
                 "Init", identifier, "==", expression ;

assignment     = identifier, "=", expression |
                 identifier, "==", expression ;

expression     = literal |
                 identifier |
                 expression, operator, expression |
                 function_call ;

operator       = "+" | "-" | "*" | "/" | "%" | "^" |
                 "==" | "=" | "<" | ">" | "<=" | ">=" |
                 "and" | "or" | "xor" | "not" |
                 "and_eq" | "or_eq" | "xor_eq" | "not_eq" |
                 "->" | "<-" | "~>" | "<~" | "<<" | ">>" ;

conditional    = "if", expression, block, [ "else", block ] ;

loop           = "for", "(", declaration, ";", expression, ";", assignment, ")", block |
                 "while", expression, block ;

function_call  = identifier, "(", [ argument_list ], ")" ;
argument_list  = expression, { ",", expression } ;

control        = "throw" | "break" | "continue" | "halt" | "goto" ;

comment        = "#", { any }, newline |
                 "**", { any }, "**" ;

literal        = number | string ;
number         = digit, { digit } ;
string         = '"', { any }, '"' ;

macro          = "|", identifier, "|", block, "|" ;
